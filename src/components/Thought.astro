---
import { getLinkViaLocale } from "@utils/slug";
import { timeFormat } from "@utils/time";
import A from "@components/webmentions/A.astro";
import Author from "@components/Author.astro";

import { getLangFromUrl, useTranslations } from "@i18n/utils";
import MarkdownIt from "markdown-it";
import Contact from "./Contact.astro";
const parser = new MarkdownIt();

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const { thought, slug, showDate = true, slugPage = false } = Astro.props;
const { Content, remarkPluginFrontmatter } = await thought.render();

let CutContent = null;

const readmore = !slugPage && remarkPluginFrontmatter.cut !== undefined;
if (readmore) {
  CutContent = parser.render(
    remarkPluginFrontmatter.cut +
      ` [readmore](${getLinkViaLocale(lang, slug)})`
  );
}
---

<article class="h-entry">
  <div class="thought-meta">
    <Author />
    <a class="u-url" href={getLinkViaLocale(lang, slug)}>
      <time class="dt-updated" datetime={thought.data.updated.toISOString()}
        >{showDate && timeFormat(thought.data.updated, lang)}</time
      >
      <time class="dt-published" datetime={thought.data.date.toISOString()}
      ></time></a
    >
  </div>
  <section
    class="main title e-content prose dark:prose-invert"
    set:html={CutContent}
  >
    {slugPage && <a class="u-bridgy-fed" href="https://fed.brid.gy/" />}

    {!readmore && <Content components={{ a: A, link: A }} />}
  </section>
  <!-- <WMStatus slug={slug} /> -->
</article>

<style lang="scss">
  article {
    @apply flex flex-col max-w-full;
    h1 {
      @apply text-3xl font-bold text-center;
    }

    .thought-meta {
      @apply flex flex-row justify-between items-center gap-2;
      color: var(--text-color);

      time {
        @apply text-sm;
      }
    }
    section.main.e-content {
      @apply list-disc max-w-full ml-10;
      color: var(--text-color);
      background-color: var(--bg-color);
    }

    .labels {
      @apply flex flex-row flex-wrap text-sm gap-2 justify-center;

      .tag {
        @apply rounded-sm px-2 bg-gray-300 dark:bg-gray-700;
        background-color: var(--label-background-color);
      }
    }
  }
</style>
