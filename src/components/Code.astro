---
import { decode } from "html-entities";
// import shiki from "shiki";
import { Icon } from "astro-icon";

const code = await Astro.slots.render("default");
const decodeString = decode(
  code.replace(/^<code class=".*?">([.\S\s]*?)<\/code>$/gm, "$1")
);
const result = code.match("language-(?<lang>\\w+)");
const lang = result && result.groups ? result.groups.lang : "";
---

<article-code data-lang={lang}>
  <div class="code-header">
    <span>{lang}</span><button>Copy<Icon name="uiw:copy" /></button>
  </div>
  <div class="code-body">
    <pre><code>{decodeString}</code></pre>
  </div>
</article-code>

<style lang="scss">
  article-code {
    @apply flex flex-col rounded-lg w-full overflow-hidden my-2;
    background-color: var(--pre-background-color);

    .code-header {
      @apply flex flex-row justify-between py-1 px-2;
      background-color: rgb(13, 13, 13);
      color: #ffffff;

      button {
        @apply flex flex-row justify-center items-center text-center gap-2 self-end text-white;

        svg {
          width: 12px;
          height: 12px;
        }
      }
    }

    .code-body {
      @apply overflow-x-auto;
      scroll-behavior: auto;
      background-color: var(--pre-background-color);

      pre {
        @apply p-2 m-0;
        background-color: var(--pre-background-color);
      }
    }
    .code-body::-webkit-scrollbar {
      width: 4px;
      height: 4px;
    }
    .code-body::-webkit-scrollbar-track {
      @apply mx-2 my-2;
      box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);
      margin-left: 1rem;
      margin-right: 1rem;
    }

    .code-body::-webkit-scrollbar-thumb {
      background-color: black;
      border-radius: 1rem;
      width: 4px;
      height: 4px;
    }
  }
</style>

<script is:inline src="https://unpkg.com/shiki"></script>
<script>
  class Code extends HTMLElement {
    constructor() {
      super();

      this.lang = this.dataset.lang;
      shiki
        .getHighlighter({ theme: "monokai", langs: [this.lang] })
        .then((highlighter) => {
          const pre = this.querySelector(".code-body");
          const code = highlighter.codeToHtml(pre.innerText, {
            lang: this.lang,
          });

          pre.innerHTML = code;
        });

      const copyButton = this.querySelector("button");
      const pre = this.querySelector("div.code-body");
      copyButton.addEventListener("click", () => {
        navigator.clipboard.writeText(pre.innerText).then(() => {
          console.log("copy successd");
        });
      });
    }
  }

  customElements.define("article-code", Code);
</script>
