---
import { CollectionEntry } from "astro:content";
import i18next, { changeLanguage, t } from "i18next";
import Layout from "@layouts/Layout.astro";
import { getThoughts } from "@utils/posts";
import { timeFormat } from "@utils/time";
import Breadcrumb from "@components/Breadcrumb.astro";
import Comments from "@components/Comments.astro";
import Tags from "@components/Tags.astro";

changeLanguage("cn");

const locale = i18next.language;
export async function getStaticPaths() {
    const locale = i18next.language;
    const thoughts = await getThoughts(locale);
    return thoughts.map((thought) => {
        return {
            params: { slug: thought.slug },
            props: { thought },
        };
    });
}
type Props = CollectionEntry<`thoughts-cn` | `thoughts-en`>;
const { slug } = Astro.params;
const { thought } = Astro.props;
const { Content } = await thought.render();
---

<Layout
  title={thought.data.title}
  seo={{
    title: thought.data.title,
    description: thought.body,
    url: `/thoughts/${slug}`,
    date: thought.data.date,
    updated: thought.data.updated,
    keywords: thought.data.tags,
  }}
>
  <Breadcrumb
    breadcrumb={[
      {
        url: `/thoughts`,
        name: "thoughts",
      },
    ]}
  />
  <article class="h-entry">
    <span class="series p-category"></span>
    <h1 class="series p-category">{t("thoughts")}</h1>
    <div class="post-meta">
      <time>{timeFormat(thought.data.date, locale)}</time>
    </div>
    <section
      class="main title p-name e-content p-summary format sm:format-sm lg:format-lg dark:format-invert format-pre:m-0 format-pre:p-2 format-li:list-disc list-disc"
    >
      <Content />
    </section>
    <Tags tags={thought.data.tags} />
  </article>

  <Comments locale={locale} slug={`/thoughts/${slug}`} />
</Layout>

<style lang="scss">
  article {
    @apply flex flex-col w-full gap-4;

    img {
      @apply w-full rounded-lg top-8 -z-10;
    }
    h1 {
      @apply text-3xl font-bold text-center;
    }

    .post-meta {
      @apply flex flex-col gap-2;
      color: var(--text-color);

      time {
        @apply text-left;
      }
    }
    section.main.e-content {
      @apply max-w-full list-disc text-justify;
      color: var(--text-color);
      background-color: var(--bg-color);
    }

    .labels {
      @apply flex flex-row flex-wrap text-sm gap-2 justify-center;

      .tag {
        @apply rounded-sm px-2 bg-gray-300 dark:bg-gray-700;
        background-color: var(--label-background-color);
      }
    }
  }
</style>
